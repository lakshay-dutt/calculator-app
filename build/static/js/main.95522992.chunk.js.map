{"version":3,"sources":["Components/CalculatorKey.js","Components/AutoScalingText.js","Components/CalculatorDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["CalculatorKey","this","props","onPress","className","onPoint","React","Component","AutoScalingText","state","scale","node","actualScale","parentNode","offsetWidth","setState","style","transform","ref","children","CalculatorDisplay","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","CalculatorOperations","prevValue","nextValue","Calculator","displayValue","operator","waitingForOperand","handleKeyDown","event","key","preventDefault","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearLastChar","clearDisplay","clearAll","substring","length","newValue","String","fixedDigits","replace","toFixed","digit","nextOperator","inputValue","currentValue","document","addEventListener","removeEventListener","clearText","toggleSign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.95522992.chunk.js","sourcesContent":["import React from \"react\";\nimport PointTarget from \"react-point\";\n\nclass CalculatorKey extends React.Component {\n  render() {\n    const { onPress, className, ...props } = this.props;\n\n    return (\n      <PointTarget onPoint={onPress}>\n        <button className={`calculator-key ${className}`} {...props} />\n      </PointTarget>\n    );\n  }\n}\n\nexport default CalculatorKey;\n","import React from \"react\";\n\nclass AutoScalingText extends React.Component {\n  state = {\n    scale: 1,\n  };\n\n  componentDidUpdate() {\n    const { scale } = this.state;\n\n    const node = this.node;\n    const parentNode = node.parentNode;\n\n    const availableWidth = parentNode.offsetWidth;\n    const actualWidth = node.offsetWidth;\n    const actualScale = availableWidth / actualWidth;\n\n    if (scale === actualScale) return;\n\n    if (actualScale < 1) {\n      this.setState({ scale: actualScale });\n    } else if (scale < 1) {\n      this.setState({ scale: 1 });\n    }\n  }\n\n  render() {\n    const { scale } = this.state;\n\n    return (\n      <div\n        className=\"auto-scaling-text\"\n        style={{ transform: `scale(${scale},${scale})` }}\n        ref={(node) => (this.node = node)}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default AutoScalingText;\n","import React from \"react\";\nimport AutoScalingText from \"./AutoScalingText\";\n\nconst CalculatorDisplay = (props) => {\n  const { value } = props;\n  const language = navigator.language || \"en-US\";\n  let formattedValue = parseFloat(value).toLocaleString(language, {\n    useGrouping: true,\n    maximumFractionDigits: 6,\n  });\n\n  const match = value.match(/\\.\\d*?(0*)$/);\n\n  if (match) formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n\n  return (\n    <div {...props} className=\"calculator-display\">\n      <AutoScalingText>{formattedValue}</AutoScalingText>\n    </div>\n  );\n};\n\nexport default CalculatorDisplay;\n","import React from \"react\";\nimport CalculatorKey from \"./Components/CalculatorKey\";\nimport CalculatorDisplay from \"./Components/CalculatorDisplay\";\nimport \"./index.css\";\n\nconst CalculatorOperations = {\n  \"/\": (prevValue, nextValue) => prevValue / nextValue,\n  \"*\": (prevValue, nextValue) => prevValue * nextValue,\n  \"+\": (prevValue, nextValue) => prevValue + nextValue,\n  \"-\": (prevValue, nextValue) => prevValue - nextValue,\n  \"=\": (prevValue, nextValue) => nextValue,\n};\n\nexport default class Calculator extends React.Component {\n  state = {\n    value: null,\n    displayValue: \"0\",\n    operator: null,\n    waitingForOperand: false,\n  };\n\n  clearAll() {\n    this.setState({\n      value: null,\n      displayValue: \"0\",\n      operator: null,\n      waitingForOperand: false,\n    });\n  }\n\n  clearDisplay() {\n    this.setState({\n      displayValue: \"0\",\n    });\n  }\n\n  clearLastChar() {\n    const { displayValue } = this.state;\n\n    this.setState({\n      displayValue: displayValue.substring(0, displayValue.length - 1) || \"0\",\n    });\n  }\n\n  toggleSign() {\n    const { displayValue } = this.state;\n    const newValue = parseFloat(displayValue) * -1;\n\n    this.setState({\n      displayValue: String(newValue),\n    });\n  }\n\n  inputPercent() {\n    const { displayValue } = this.state;\n    const currentValue = parseFloat(displayValue);\n\n    if (currentValue === 0) return;\n\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, \"\");\n    const newValue = parseFloat(displayValue) / 100;\n\n    this.setState({\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n    });\n  }\n\n  inputDot() {\n    const { displayValue } = this.state;\n\n    if (!/\\./.test(displayValue)) {\n      this.setState({\n        displayValue: displayValue + \".\",\n        waitingForOperand: false,\n      });\n    }\n  }\n\n  inputDigit(digit) {\n    const { displayValue, waitingForOperand } = this.state;\n\n    if (waitingForOperand) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false,\n      });\n    } else {\n      this.setState({\n        displayValue:\n          displayValue === \"0\" ? String(digit) : displayValue + digit,\n      });\n    }\n  }\n\n  performOperation(nextOperator) {\n    const { value, displayValue, operator } = this.state;\n    const inputValue = parseFloat(displayValue);\n\n    if (value == null) {\n      this.setState({\n        value: inputValue,\n      });\n    } else if (operator) {\n      const currentValue = value || 0;\n      const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n      this.setState({\n        value: newValue,\n        displayValue: String(newValue),\n      });\n    }\n\n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator,\n    });\n  }\n\n  handleKeyDown = (event) => {\n    let { key } = event;\n\n    if (key === \"Enter\") key = \"=\";\n\n    if (/\\d/.test(key)) {\n      event.preventDefault();\n      this.inputDigit(parseInt(key, 10));\n    } else if (key in CalculatorOperations) {\n      event.preventDefault();\n      this.performOperation(key);\n    } else if (key === \".\") {\n      event.preventDefault();\n      this.inputDot();\n    } else if (key === \"%\") {\n      event.preventDefault();\n      this.inputPercent();\n    } else if (key === \"Backspace\") {\n      event.preventDefault();\n      this.clearLastChar();\n    } else if (key === \"Clear\") {\n      event.preventDefault();\n\n      if (this.state.displayValue !== \"0\") {\n        this.clearDisplay();\n      } else {\n        this.clearAll();\n      }\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    const { displayValue } = this.state;\n\n    const clearDisplay = displayValue !== \"0\";\n    const clearText = clearDisplay ? \"C\" : \"AC\";\n\n    return (\n      <div className=\"calculator\">\n        <CalculatorDisplay value={displayValue} />\n        <div className=\"calculator-keypad\">\n          <div className=\"input-keys\">\n            <div className=\"function-keys\">\n              <CalculatorKey\n                className=\"key-clear\"\n                onPress={() =>\n                  clearDisplay ? this.clearDisplay() : this.clearAll()\n                }\n              >\n                {clearText}\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-sign\"\n                onPress={() => this.toggleSign()}\n              >\n                ±\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-percent\"\n                onPress={() => this.inputPercent()}\n              >\n                %\n              </CalculatorKey>\n            </div>\n            <div className=\"digit-keys\">\n              <CalculatorKey\n                className=\"key-0\"\n                onPress={() => this.inputDigit(0)}\n              >\n                0\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-dot\"\n                onPress={() => this.inputDot()}\n              >\n                ●\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-1\"\n                onPress={() => this.inputDigit(1)}\n              >\n                1\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-2\"\n                onPress={() => this.inputDigit(2)}\n              >\n                2\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-3\"\n                onPress={() => this.inputDigit(3)}\n              >\n                3\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-4\"\n                onPress={() => this.inputDigit(4)}\n              >\n                4\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-5\"\n                onPress={() => this.inputDigit(5)}\n              >\n                5\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-6\"\n                onPress={() => this.inputDigit(6)}\n              >\n                6\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-7\"\n                onPress={() => this.inputDigit(7)}\n              >\n                7\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-8\"\n                onPress={() => this.inputDigit(8)}\n              >\n                8\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-9\"\n                onPress={() => this.inputDigit(9)}\n              >\n                9\n              </CalculatorKey>\n            </div>\n          </div>\n          <div className=\"operator-keys\">\n            <CalculatorKey\n              className=\"key-divide\"\n              onPress={() => this.performOperation(\"/\")}\n            >\n              ÷\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-multiply\"\n              onPress={() => this.performOperation(\"*\")}\n            >\n              ×\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-subtract\"\n              onPress={() => this.performOperation(\"-\")}\n            >\n              −\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-add\"\n              onPress={() => this.performOperation(\"+\")}\n            >\n              +\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-equals\"\n              onPress={() => this.performOperation(\"=\")}\n            >\n              =\n            </CalculatorKey>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}